// source: scoretrak/property/v1/property.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return Function("return this")();
}.call(null);

var google_protobuf_wrappers_pb = require("google-protobuf/google/protobuf/wrappers_pb.js");
goog.object.extend(proto, google_protobuf_wrappers_pb);
var scoretrak_proto_v1_uuid_pb = require("../../../scoretrak/proto/v1/uuid_pb.js");
goog.object.extend(proto, scoretrak_proto_v1_uuid_pb);
goog.exportSymbol("proto.scoretrak.property.v1.DeleteRequest", null, global);
goog.exportSymbol("proto.scoretrak.property.v1.DeleteResponse", null, global);
goog.exportSymbol(
  "proto.scoretrak.property.v1.GetAllByServiceIDRequest",
  null,
  global
);
goog.exportSymbol(
  "proto.scoretrak.property.v1.GetAllByServiceIDResponse",
  null,
  global
);
goog.exportSymbol("proto.scoretrak.property.v1.GetAllRequest", null, global);
goog.exportSymbol("proto.scoretrak.property.v1.GetAllResponse", null, global);
goog.exportSymbol(
  "proto.scoretrak.property.v1.GetByServiceIDKeyRequest",
  null,
  global
);
goog.exportSymbol(
  "proto.scoretrak.property.v1.GetByServiceIDKeyResponse",
  null,
  global
);
goog.exportSymbol("proto.scoretrak.property.v1.Property", null, global);
goog.exportSymbol("proto.scoretrak.property.v1.Status", null, global);
goog.exportSymbol("proto.scoretrak.property.v1.StoreRequest", null, global);
goog.exportSymbol("proto.scoretrak.property.v1.StoreResponse", null, global);
goog.exportSymbol("proto.scoretrak.property.v1.UpdateRequest", null, global);
goog.exportSymbol("proto.scoretrak.property.v1.UpdateResponse", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.Property = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.property.v1.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.Property.displayName =
    "proto.scoretrak.property.v1.Property";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.GetAllRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.property.v1.GetAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.GetAllRequest.displayName =
    "proto.scoretrak.property.v1.GetAllRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.GetAllResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.scoretrak.property.v1.GetAllResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.scoretrak.property.v1.GetAllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.GetAllResponse.displayName =
    "proto.scoretrak.property.v1.GetAllResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.scoretrak.property.v1.GetByServiceIDKeyRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.GetByServiceIDKeyRequest.displayName =
    "proto.scoretrak.property.v1.GetByServiceIDKeyRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.scoretrak.property.v1.GetByServiceIDKeyResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.GetByServiceIDKeyResponse.displayName =
    "proto.scoretrak.property.v1.GetByServiceIDKeyResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.scoretrak.property.v1.GetAllByServiceIDRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.GetAllByServiceIDRequest.displayName =
    "proto.scoretrak.property.v1.GetAllByServiceIDRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.scoretrak.property.v1.GetAllByServiceIDResponse.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.scoretrak.property.v1.GetAllByServiceIDResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.GetAllByServiceIDResponse.displayName =
    "proto.scoretrak.property.v1.GetAllByServiceIDResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.DeleteRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.property.v1.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.DeleteRequest.displayName =
    "proto.scoretrak.property.v1.DeleteRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.DeleteResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.property.v1.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.DeleteResponse.displayName =
    "proto.scoretrak.property.v1.DeleteResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.StoreRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.scoretrak.property.v1.StoreRequest.repeatedFields_,
    null
  );
};
goog.inherits(proto.scoretrak.property.v1.StoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.StoreRequest.displayName =
    "proto.scoretrak.property.v1.StoreRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.StoreResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.property.v1.StoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.StoreResponse.displayName =
    "proto.scoretrak.property.v1.StoreResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.UpdateRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.property.v1.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.UpdateRequest.displayName =
    "proto.scoretrak.property.v1.UpdateRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.property.v1.UpdateResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.property.v1.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.property.v1.UpdateResponse.displayName =
    "proto.scoretrak.property.v1.UpdateResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.Property.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.Property.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.Property} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.Property.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        serviceId:
          (f = msg.getServiceId()) &&
          scoretrak_proto_v1_uuid_pb.UUID.toObject(includeInstance, f),
        key: jspb.Message.getFieldWithDefault(msg, 2, ""),
        value:
          (f = msg.getValue()) &&
          google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
        status: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.Property}
 */
proto.scoretrak.property.v1.Property.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.Property();
  return proto.scoretrak.property.v1.Property.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.Property}
 */
proto.scoretrak.property.v1.Property.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new scoretrak_proto_v1_uuid_pb.UUID();
        reader.readMessage(
          value,
          scoretrak_proto_v1_uuid_pb.UUID.deserializeBinaryFromReader
        );
        msg.setServiceId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 3:
        var value = new google_protobuf_wrappers_pb.StringValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader
        );
        msg.setValue(value);
        break;
      case 4:
        var value = /** @type {!proto.scoretrak.property.v1.Status} */ (
          reader.readEnum()
        );
        msg.setStatus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.Property.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.scoretrak.property.v1.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.Property.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getServiceId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      scoretrak_proto_v1_uuid_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }
};

/**
 * optional scoretrak.proto.v1.UUID service_id = 1;
 * @return {?proto.scoretrak.proto.v1.UUID}
 */
proto.scoretrak.property.v1.Property.prototype.getServiceId = function () {
  return /** @type{?proto.scoretrak.proto.v1.UUID} */ (
    jspb.Message.getWrapperField(this, scoretrak_proto_v1_uuid_pb.UUID, 1)
  );
};

/**
 * @param {?proto.scoretrak.proto.v1.UUID|undefined} value
 * @return {!proto.scoretrak.property.v1.Property} returns this
 */
proto.scoretrak.property.v1.Property.prototype.setServiceId = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.property.v1.Property} returns this
 */
proto.scoretrak.property.v1.Property.prototype.clearServiceId = function () {
  return this.setServiceId(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.property.v1.Property.prototype.hasServiceId = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string key = 2;
 * @return {string}
 */
proto.scoretrak.property.v1.Property.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.scoretrak.property.v1.Property} returns this
 */
proto.scoretrak.property.v1.Property.prototype.setKey = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional google.protobuf.StringValue value = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.scoretrak.property.v1.Property.prototype.getValue = function () {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(
      this,
      google_protobuf_wrappers_pb.StringValue,
      3
    )
  );
};

/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.scoretrak.property.v1.Property} returns this
 */
proto.scoretrak.property.v1.Property.prototype.setValue = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.property.v1.Property} returns this
 */
proto.scoretrak.property.v1.Property.prototype.clearValue = function () {
  return this.setValue(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.property.v1.Property.prototype.hasValue = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Status status = 4;
 * @return {!proto.scoretrak.property.v1.Status}
 */
proto.scoretrak.property.v1.Property.prototype.getStatus = function () {
  return /** @type {!proto.scoretrak.property.v1.Status} */ (
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/**
 * @param {!proto.scoretrak.property.v1.Status} value
 * @return {!proto.scoretrak.property.v1.Property} returns this
 */
proto.scoretrak.property.v1.Property.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.GetAllRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.GetAllRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.GetAllRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.GetAllRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.GetAllRequest}
 */
proto.scoretrak.property.v1.GetAllRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.GetAllRequest();
  return proto.scoretrak.property.v1.GetAllRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.GetAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.GetAllRequest}
 */
proto.scoretrak.property.v1.GetAllRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.GetAllRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.GetAllRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.GetAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.GetAllRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scoretrak.property.v1.GetAllResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.GetAllResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.GetAllResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.GetAllResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.GetAllResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        propertiesList: jspb.Message.toObjectList(
          msg.getPropertiesList(),
          proto.scoretrak.property.v1.Property.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.GetAllResponse}
 */
proto.scoretrak.property.v1.GetAllResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.GetAllResponse();
  return proto.scoretrak.property.v1.GetAllResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.GetAllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.GetAllResponse}
 */
proto.scoretrak.property.v1.GetAllResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.scoretrak.property.v1.Property();
          reader.readMessage(
            value,
            proto.scoretrak.property.v1.Property.deserializeBinaryFromReader
          );
          msg.addProperties(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.GetAllResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.GetAllResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.GetAllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.GetAllResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scoretrak.property.v1.Property.serializeBinaryToWriter
    );
  }
};

/**
 * repeated Property properties = 1;
 * @return {!Array<!proto.scoretrak.property.v1.Property>}
 */
proto.scoretrak.property.v1.GetAllResponse.prototype.getPropertiesList =
  function () {
    return /** @type{!Array<!proto.scoretrak.property.v1.Property>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.scoretrak.property.v1.Property,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.scoretrak.property.v1.Property>} value
 * @return {!proto.scoretrak.property.v1.GetAllResponse} returns this
 */
proto.scoretrak.property.v1.GetAllResponse.prototype.setPropertiesList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.scoretrak.property.v1.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scoretrak.property.v1.Property}
 */
proto.scoretrak.property.v1.GetAllResponse.prototype.addProperties = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.scoretrak.property.v1.Property,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scoretrak.property.v1.GetAllResponse} returns this
 */
proto.scoretrak.property.v1.GetAllResponse.prototype.clearPropertiesList =
  function () {
    return this.setPropertiesList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.GetByServiceIDKeyRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.scoretrak.property.v1.GetByServiceIDKeyRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.GetByServiceIDKeyRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.GetByServiceIDKeyRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        serviceId:
          (f = msg.getServiceId()) &&
          scoretrak_proto_v1_uuid_pb.UUID.toObject(includeInstance, f),
        key: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyRequest}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.scoretrak.property.v1.GetByServiceIDKeyRequest();
    return proto.scoretrak.property.v1.GetByServiceIDKeyRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.GetByServiceIDKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyRequest}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new scoretrak_proto_v1_uuid_pb.UUID();
          reader.readMessage(
            value,
            scoretrak_proto_v1_uuid_pb.UUID.deserializeBinaryFromReader
          );
          msg.setServiceId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setKey(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.GetByServiceIDKeyRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.GetByServiceIDKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getServiceId();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        scoretrak_proto_v1_uuid_pb.UUID.serializeBinaryToWriter
      );
    }
    f = message.getKey();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional scoretrak.proto.v1.UUID service_id = 1;
 * @return {?proto.scoretrak.proto.v1.UUID}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.prototype.getServiceId =
  function () {
    return /** @type{?proto.scoretrak.proto.v1.UUID} */ (
      jspb.Message.getWrapperField(this, scoretrak_proto_v1_uuid_pb.UUID, 1)
    );
  };

/**
 * @param {?proto.scoretrak.proto.v1.UUID|undefined} value
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyRequest} returns this
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.prototype.setServiceId =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyRequest} returns this
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.prototype.clearServiceId =
  function () {
    return this.setServiceId(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.prototype.hasServiceId =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional string key = 2;
 * @return {string}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.prototype.getKey =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyRequest} returns this
 */
proto.scoretrak.property.v1.GetByServiceIDKeyRequest.prototype.setKey =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.GetByServiceIDKeyResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.scoretrak.property.v1.GetByServiceIDKeyResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.GetByServiceIDKeyResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.GetByServiceIDKeyResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        property:
          (f = msg.getProperty()) &&
          proto.scoretrak.property.v1.Property.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyResponse}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.scoretrak.property.v1.GetByServiceIDKeyResponse();
    return proto.scoretrak.property.v1.GetByServiceIDKeyResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.GetByServiceIDKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyResponse}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.scoretrak.property.v1.Property();
          reader.readMessage(
            value,
            proto.scoretrak.property.v1.Property.deserializeBinaryFromReader
          );
          msg.setProperty(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.GetByServiceIDKeyResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.GetByServiceIDKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getProperty();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.scoretrak.property.v1.Property.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Property property = 1;
 * @return {?proto.scoretrak.property.v1.Property}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse.prototype.getProperty =
  function () {
    return /** @type{?proto.scoretrak.property.v1.Property} */ (
      jspb.Message.getWrapperField(
        this,
        proto.scoretrak.property.v1.Property,
        1
      )
    );
  };

/**
 * @param {?proto.scoretrak.property.v1.Property|undefined} value
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyResponse} returns this
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse.prototype.setProperty =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.property.v1.GetByServiceIDKeyResponse} returns this
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse.prototype.clearProperty =
  function () {
    return this.setProperty(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.property.v1.GetByServiceIDKeyResponse.prototype.hasProperty =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.GetAllByServiceIDRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.scoretrak.property.v1.GetAllByServiceIDRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.GetAllByServiceIDRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.GetAllByServiceIDRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        serviceId:
          (f = msg.getServiceId()) &&
          scoretrak_proto_v1_uuid_pb.UUID.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.GetAllByServiceIDRequest}
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.scoretrak.property.v1.GetAllByServiceIDRequest();
    return proto.scoretrak.property.v1.GetAllByServiceIDRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.GetAllByServiceIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.GetAllByServiceIDRequest}
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new scoretrak_proto_v1_uuid_pb.UUID();
          reader.readMessage(
            value,
            scoretrak_proto_v1_uuid_pb.UUID.deserializeBinaryFromReader
          );
          msg.setServiceId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.GetAllByServiceIDRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.GetAllByServiceIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getServiceId();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        scoretrak_proto_v1_uuid_pb.UUID.serializeBinaryToWriter
      );
    }
  };

/**
 * optional scoretrak.proto.v1.UUID service_id = 1;
 * @return {?proto.scoretrak.proto.v1.UUID}
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest.prototype.getServiceId =
  function () {
    return /** @type{?proto.scoretrak.proto.v1.UUID} */ (
      jspb.Message.getWrapperField(this, scoretrak_proto_v1_uuid_pb.UUID, 1)
    );
  };

/**
 * @param {?proto.scoretrak.proto.v1.UUID|undefined} value
 * @return {!proto.scoretrak.property.v1.GetAllByServiceIDRequest} returns this
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest.prototype.setServiceId =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.property.v1.GetAllByServiceIDRequest} returns this
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest.prototype.clearServiceId =
  function () {
    return this.setServiceId(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.property.v1.GetAllByServiceIDRequest.prototype.hasServiceId =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.GetAllByServiceIDResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.scoretrak.property.v1.GetAllByServiceIDResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.GetAllByServiceIDResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.GetAllByServiceIDResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        propertiesList: jspb.Message.toObjectList(
          msg.getPropertiesList(),
          proto.scoretrak.property.v1.Property.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.GetAllByServiceIDResponse}
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.scoretrak.property.v1.GetAllByServiceIDResponse();
    return proto.scoretrak.property.v1.GetAllByServiceIDResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.GetAllByServiceIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.GetAllByServiceIDResponse}
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.scoretrak.property.v1.Property();
          reader.readMessage(
            value,
            proto.scoretrak.property.v1.Property.deserializeBinaryFromReader
          );
          msg.addProperties(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.GetAllByServiceIDResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.GetAllByServiceIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getPropertiesList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        proto.scoretrak.property.v1.Property.serializeBinaryToWriter
      );
    }
  };

/**
 * repeated Property properties = 1;
 * @return {!Array<!proto.scoretrak.property.v1.Property>}
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.prototype.getPropertiesList =
  function () {
    return /** @type{!Array<!proto.scoretrak.property.v1.Property>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.scoretrak.property.v1.Property,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.scoretrak.property.v1.Property>} value
 * @return {!proto.scoretrak.property.v1.GetAllByServiceIDResponse} returns this
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.prototype.setPropertiesList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.scoretrak.property.v1.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scoretrak.property.v1.Property}
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.prototype.addProperties =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.scoretrak.property.v1.Property,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scoretrak.property.v1.GetAllByServiceIDResponse} returns this
 */
proto.scoretrak.property.v1.GetAllByServiceIDResponse.prototype.clearPropertiesList =
  function () {
    return this.setPropertiesList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.DeleteRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.DeleteRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.DeleteRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.DeleteRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        serviceId:
          (f = msg.getServiceId()) &&
          scoretrak_proto_v1_uuid_pb.UUID.toObject(includeInstance, f),
        key: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.DeleteRequest}
 */
proto.scoretrak.property.v1.DeleteRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.DeleteRequest();
  return proto.scoretrak.property.v1.DeleteRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.DeleteRequest}
 */
proto.scoretrak.property.v1.DeleteRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new scoretrak_proto_v1_uuid_pb.UUID();
          reader.readMessage(
            value,
            scoretrak_proto_v1_uuid_pb.UUID.deserializeBinaryFromReader
          );
          msg.setServiceId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setKey(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.DeleteRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.DeleteRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.DeleteRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getServiceId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      scoretrak_proto_v1_uuid_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional scoretrak.proto.v1.UUID service_id = 1;
 * @return {?proto.scoretrak.proto.v1.UUID}
 */
proto.scoretrak.property.v1.DeleteRequest.prototype.getServiceId = function () {
  return /** @type{?proto.scoretrak.proto.v1.UUID} */ (
    jspb.Message.getWrapperField(this, scoretrak_proto_v1_uuid_pb.UUID, 1)
  );
};

/**
 * @param {?proto.scoretrak.proto.v1.UUID|undefined} value
 * @return {!proto.scoretrak.property.v1.DeleteRequest} returns this
 */
proto.scoretrak.property.v1.DeleteRequest.prototype.setServiceId = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.property.v1.DeleteRequest} returns this
 */
proto.scoretrak.property.v1.DeleteRequest.prototype.clearServiceId =
  function () {
    return this.setServiceId(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.property.v1.DeleteRequest.prototype.hasServiceId = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string key = 2;
 * @return {string}
 */
proto.scoretrak.property.v1.DeleteRequest.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.scoretrak.property.v1.DeleteRequest} returns this
 */
proto.scoretrak.property.v1.DeleteRequest.prototype.setKey = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.DeleteResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.DeleteResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.DeleteResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.DeleteResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.DeleteResponse}
 */
proto.scoretrak.property.v1.DeleteResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.DeleteResponse();
  return proto.scoretrak.property.v1.DeleteResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.DeleteResponse}
 */
proto.scoretrak.property.v1.DeleteResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.DeleteResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.DeleteResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.DeleteResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scoretrak.property.v1.StoreRequest.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.StoreRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.StoreRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.StoreRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.StoreRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        propertiesList: jspb.Message.toObjectList(
          msg.getPropertiesList(),
          proto.scoretrak.property.v1.Property.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.StoreRequest}
 */
proto.scoretrak.property.v1.StoreRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.StoreRequest();
  return proto.scoretrak.property.v1.StoreRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.StoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.StoreRequest}
 */
proto.scoretrak.property.v1.StoreRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.scoretrak.property.v1.Property();
          reader.readMessage(
            value,
            proto.scoretrak.property.v1.Property.deserializeBinaryFromReader
          );
          msg.addProperties(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.StoreRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.StoreRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.StoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.StoreRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scoretrak.property.v1.Property.serializeBinaryToWriter
    );
  }
};

/**
 * repeated Property properties = 1;
 * @return {!Array<!proto.scoretrak.property.v1.Property>}
 */
proto.scoretrak.property.v1.StoreRequest.prototype.getPropertiesList =
  function () {
    return /** @type{!Array<!proto.scoretrak.property.v1.Property>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.scoretrak.property.v1.Property,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.scoretrak.property.v1.Property>} value
 * @return {!proto.scoretrak.property.v1.StoreRequest} returns this
 */
proto.scoretrak.property.v1.StoreRequest.prototype.setPropertiesList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.scoretrak.property.v1.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scoretrak.property.v1.Property}
 */
proto.scoretrak.property.v1.StoreRequest.prototype.addProperties = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.scoretrak.property.v1.Property,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scoretrak.property.v1.StoreRequest} returns this
 */
proto.scoretrak.property.v1.StoreRequest.prototype.clearPropertiesList =
  function () {
    return this.setPropertiesList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.StoreResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.StoreResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.StoreResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.StoreResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.StoreResponse}
 */
proto.scoretrak.property.v1.StoreResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.StoreResponse();
  return proto.scoretrak.property.v1.StoreResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.StoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.StoreResponse}
 */
proto.scoretrak.property.v1.StoreResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.StoreResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.StoreResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.StoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.StoreResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.UpdateRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.UpdateRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.UpdateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.UpdateRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        property:
          (f = msg.getProperty()) &&
          proto.scoretrak.property.v1.Property.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.UpdateRequest}
 */
proto.scoretrak.property.v1.UpdateRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.UpdateRequest();
  return proto.scoretrak.property.v1.UpdateRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.UpdateRequest}
 */
proto.scoretrak.property.v1.UpdateRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.scoretrak.property.v1.Property();
          reader.readMessage(
            value,
            proto.scoretrak.property.v1.Property.deserializeBinaryFromReader
          );
          msg.setProperty(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.UpdateRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.UpdateRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.UpdateRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scoretrak.property.v1.Property.serializeBinaryToWriter
    );
  }
};

/**
 * optional Property property = 1;
 * @return {?proto.scoretrak.property.v1.Property}
 */
proto.scoretrak.property.v1.UpdateRequest.prototype.getProperty = function () {
  return /** @type{?proto.scoretrak.property.v1.Property} */ (
    jspb.Message.getWrapperField(this, proto.scoretrak.property.v1.Property, 1)
  );
};

/**
 * @param {?proto.scoretrak.property.v1.Property|undefined} value
 * @return {!proto.scoretrak.property.v1.UpdateRequest} returns this
 */
proto.scoretrak.property.v1.UpdateRequest.prototype.setProperty = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.property.v1.UpdateRequest} returns this
 */
proto.scoretrak.property.v1.UpdateRequest.prototype.clearProperty =
  function () {
    return this.setProperty(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.property.v1.UpdateRequest.prototype.hasProperty = function () {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.property.v1.UpdateResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.property.v1.UpdateResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.property.v1.UpdateResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.property.v1.UpdateResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.property.v1.UpdateResponse}
 */
proto.scoretrak.property.v1.UpdateResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.property.v1.UpdateResponse();
  return proto.scoretrak.property.v1.UpdateResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.property.v1.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.property.v1.UpdateResponse}
 */
proto.scoretrak.property.v1.UpdateResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.property.v1.UpdateResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.property.v1.UpdateResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.property.v1.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.property.v1.UpdateResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

/**
 * @enum {number}
 */
proto.scoretrak.property.v1.Status = {
  STATUS_UNSPECIFIED: 0,
  STATUS_VIEW: 1,
  STATUS_EDIT: 2,
  STATUS_HIDE: 3,
};

goog.object.extend(exports, proto.scoretrak.property.v1);
