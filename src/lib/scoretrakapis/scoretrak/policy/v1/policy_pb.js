// source: scoretrak/policy/v1/policy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return Function("return this")();
}.call(null);

var google_protobuf_wrappers_pb = require("google-protobuf/google/protobuf/wrappers_pb.js");
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol("proto.scoretrak.policy.v1.GetRequest", null, global);
goog.exportSymbol("proto.scoretrak.policy.v1.GetResponse", null, global);
goog.exportSymbol("proto.scoretrak.policy.v1.Policy", null, global);
goog.exportSymbol("proto.scoretrak.policy.v1.UpdateRequest", null, global);
goog.exportSymbol("proto.scoretrak.policy.v1.UpdateResponse", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.policy.v1.Policy = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.policy.v1.Policy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.policy.v1.Policy.displayName =
    "proto.scoretrak.policy.v1.Policy";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.policy.v1.GetRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.policy.v1.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.policy.v1.GetRequest.displayName =
    "proto.scoretrak.policy.v1.GetRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.policy.v1.GetResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.policy.v1.GetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.policy.v1.GetResponse.displayName =
    "proto.scoretrak.policy.v1.GetResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.policy.v1.UpdateRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.policy.v1.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.policy.v1.UpdateRequest.displayName =
    "proto.scoretrak.policy.v1.UpdateRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scoretrak.policy.v1.UpdateResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scoretrak.policy.v1.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scoretrak.policy.v1.UpdateResponse.displayName =
    "proto.scoretrak.policy.v1.UpdateResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.policy.v1.Policy.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.policy.v1.Policy.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.policy.v1.Policy} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.policy.v1.Policy.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        allowUnauthenticatedUsers:
          (f = msg.getAllowUnauthenticatedUsers()) &&
          google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
        allowChangingUsernamesAndPasswords:
          (f = msg.getAllowChangingUsernamesAndPasswords()) &&
          google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
        showPoints:
          (f = msg.getShowPoints()) &&
          google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
        showAddresses:
          (f = msg.getShowAddresses()) &&
          google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
        allowRedTeamLaunchingServiceTestsManually:
          (f = msg.getAllowRedTeamLaunchingServiceTestsManually()) &&
          google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.policy.v1.Policy}
 */
proto.scoretrak.policy.v1.Policy.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.policy.v1.Policy();
  return proto.scoretrak.policy.v1.Policy.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.policy.v1.Policy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.policy.v1.Policy}
 */
proto.scoretrak.policy.v1.Policy.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new google_protobuf_wrappers_pb.BoolValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader
        );
        msg.setAllowUnauthenticatedUsers(value);
        break;
      case 2:
        var value = new google_protobuf_wrappers_pb.BoolValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader
        );
        msg.setAllowChangingUsernamesAndPasswords(value);
        break;
      case 3:
        var value = new google_protobuf_wrappers_pb.BoolValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader
        );
        msg.setShowPoints(value);
        break;
      case 4:
        var value = new google_protobuf_wrappers_pb.BoolValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader
        );
        msg.setShowAddresses(value);
        break;
      case 5:
        var value = new google_protobuf_wrappers_pb.BoolValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader
        );
        msg.setAllowRedTeamLaunchingServiceTestsManually(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.policy.v1.Policy.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.scoretrak.policy.v1.Policy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.policy.v1.Policy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.policy.v1.Policy.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getAllowUnauthenticatedUsers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getAllowChangingUsernamesAndPasswords();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getShowPoints();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getShowAddresses();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getAllowRedTeamLaunchingServiceTestsManually();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
};

/**
 * optional google.protobuf.BoolValue allow_unauthenticated_users = 1;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.scoretrak.policy.v1.Policy.prototype.getAllowUnauthenticatedUsers =
  function () {
    return /** @type{?proto.google.protobuf.BoolValue} */ (
      jspb.Message.getWrapperField(
        this,
        google_protobuf_wrappers_pb.BoolValue,
        1
      )
    );
  };

/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.setAllowUnauthenticatedUsers =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.clearAllowUnauthenticatedUsers =
  function () {
    return this.setAllowUnauthenticatedUsers(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.policy.v1.Policy.prototype.hasAllowUnauthenticatedUsers =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional google.protobuf.BoolValue allow_changing_usernames_and_passwords = 2;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.scoretrak.policy.v1.Policy.prototype.getAllowChangingUsernamesAndPasswords =
  function () {
    return /** @type{?proto.google.protobuf.BoolValue} */ (
      jspb.Message.getWrapperField(
        this,
        google_protobuf_wrappers_pb.BoolValue,
        2
      )
    );
  };

/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.setAllowChangingUsernamesAndPasswords =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.clearAllowChangingUsernamesAndPasswords =
  function () {
    return this.setAllowChangingUsernamesAndPasswords(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.policy.v1.Policy.prototype.hasAllowChangingUsernamesAndPasswords =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

/**
 * optional google.protobuf.BoolValue show_points = 3;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.scoretrak.policy.v1.Policy.prototype.getShowPoints = function () {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 3)
  );
};

/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.setShowPoints = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.clearShowPoints = function () {
  return this.setShowPoints(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.policy.v1.Policy.prototype.hasShowPoints = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional google.protobuf.BoolValue show_addresses = 4;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.scoretrak.policy.v1.Policy.prototype.getShowAddresses = function () {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 4)
  );
};

/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.setShowAddresses = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.clearShowAddresses = function () {
  return this.setShowAddresses(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.policy.v1.Policy.prototype.hasShowAddresses = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional google.protobuf.BoolValue allow_red_team_launching_service_tests_manually = 5;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.scoretrak.policy.v1.Policy.prototype.getAllowRedTeamLaunchingServiceTestsManually =
  function () {
    return /** @type{?proto.google.protobuf.BoolValue} */ (
      jspb.Message.getWrapperField(
        this,
        google_protobuf_wrappers_pb.BoolValue,
        5
      )
    );
  };

/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.setAllowRedTeamLaunchingServiceTestsManually =
  function (value) {
    return jspb.Message.setWrapperField(this, 5, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.policy.v1.Policy} returns this
 */
proto.scoretrak.policy.v1.Policy.prototype.clearAllowRedTeamLaunchingServiceTestsManually =
  function () {
    return this.setAllowRedTeamLaunchingServiceTestsManually(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.policy.v1.Policy.prototype.hasAllowRedTeamLaunchingServiceTestsManually =
  function () {
    return jspb.Message.getField(this, 5) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.policy.v1.GetRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.policy.v1.GetRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.policy.v1.GetRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.policy.v1.GetRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.policy.v1.GetRequest}
 */
proto.scoretrak.policy.v1.GetRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.policy.v1.GetRequest();
  return proto.scoretrak.policy.v1.GetRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.policy.v1.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.policy.v1.GetRequest}
 */
proto.scoretrak.policy.v1.GetRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.policy.v1.GetRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.scoretrak.policy.v1.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.policy.v1.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.policy.v1.GetRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.policy.v1.GetResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.policy.v1.GetResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.policy.v1.GetResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.policy.v1.GetResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        policy:
          (f = msg.getPolicy()) &&
          proto.scoretrak.policy.v1.Policy.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.policy.v1.GetResponse}
 */
proto.scoretrak.policy.v1.GetResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.policy.v1.GetResponse();
  return proto.scoretrak.policy.v1.GetResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.policy.v1.GetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.policy.v1.GetResponse}
 */
proto.scoretrak.policy.v1.GetResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.scoretrak.policy.v1.Policy();
        reader.readMessage(
          value,
          proto.scoretrak.policy.v1.Policy.deserializeBinaryFromReader
        );
        msg.setPolicy(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.policy.v1.GetResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.scoretrak.policy.v1.GetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.policy.v1.GetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.policy.v1.GetResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scoretrak.policy.v1.Policy.serializeBinaryToWriter
    );
  }
};

/**
 * optional Policy policy = 1;
 * @return {?proto.scoretrak.policy.v1.Policy}
 */
proto.scoretrak.policy.v1.GetResponse.prototype.getPolicy = function () {
  return /** @type{?proto.scoretrak.policy.v1.Policy} */ (
    jspb.Message.getWrapperField(this, proto.scoretrak.policy.v1.Policy, 1)
  );
};

/**
 * @param {?proto.scoretrak.policy.v1.Policy|undefined} value
 * @return {!proto.scoretrak.policy.v1.GetResponse} returns this
 */
proto.scoretrak.policy.v1.GetResponse.prototype.setPolicy = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.policy.v1.GetResponse} returns this
 */
proto.scoretrak.policy.v1.GetResponse.prototype.clearPolicy = function () {
  return this.setPolicy(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.policy.v1.GetResponse.prototype.hasPolicy = function () {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.policy.v1.UpdateRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.policy.v1.UpdateRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.policy.v1.UpdateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.policy.v1.UpdateRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        policy:
          (f = msg.getPolicy()) &&
          proto.scoretrak.policy.v1.Policy.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.policy.v1.UpdateRequest}
 */
proto.scoretrak.policy.v1.UpdateRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.policy.v1.UpdateRequest();
  return proto.scoretrak.policy.v1.UpdateRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.policy.v1.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.policy.v1.UpdateRequest}
 */
proto.scoretrak.policy.v1.UpdateRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.scoretrak.policy.v1.Policy();
        reader.readMessage(
          value,
          proto.scoretrak.policy.v1.Policy.deserializeBinaryFromReader
        );
        msg.setPolicy(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.policy.v1.UpdateRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.policy.v1.UpdateRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.policy.v1.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.policy.v1.UpdateRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scoretrak.policy.v1.Policy.serializeBinaryToWriter
    );
  }
};

/**
 * optional Policy policy = 1;
 * @return {?proto.scoretrak.policy.v1.Policy}
 */
proto.scoretrak.policy.v1.UpdateRequest.prototype.getPolicy = function () {
  return /** @type{?proto.scoretrak.policy.v1.Policy} */ (
    jspb.Message.getWrapperField(this, proto.scoretrak.policy.v1.Policy, 1)
  );
};

/**
 * @param {?proto.scoretrak.policy.v1.Policy|undefined} value
 * @return {!proto.scoretrak.policy.v1.UpdateRequest} returns this
 */
proto.scoretrak.policy.v1.UpdateRequest.prototype.setPolicy = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.scoretrak.policy.v1.UpdateRequest} returns this
 */
proto.scoretrak.policy.v1.UpdateRequest.prototype.clearPolicy = function () {
  return this.setPolicy(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scoretrak.policy.v1.UpdateRequest.prototype.hasPolicy = function () {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.scoretrak.policy.v1.UpdateResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.scoretrak.policy.v1.UpdateResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.scoretrak.policy.v1.UpdateResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.scoretrak.policy.v1.UpdateResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scoretrak.policy.v1.UpdateResponse}
 */
proto.scoretrak.policy.v1.UpdateResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scoretrak.policy.v1.UpdateResponse();
  return proto.scoretrak.policy.v1.UpdateResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scoretrak.policy.v1.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scoretrak.policy.v1.UpdateResponse}
 */
proto.scoretrak.policy.v1.UpdateResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scoretrak.policy.v1.UpdateResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.scoretrak.policy.v1.UpdateResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scoretrak.policy.v1.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scoretrak.policy.v1.UpdateResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

goog.object.extend(exports, proto.scoretrak.policy.v1);
