// source: pkg/competition/competitionpb/competition.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var pkg_config_configpb_config_pb = require('../../../pkg/config/configpb/config_pb.js');
goog.object.extend(proto, pkg_config_configpb_config_pb);
var pkg_report_reportpb_report_pb = require('../../../pkg/report/reportpb/report_pb.js');
goog.object.extend(proto, pkg_report_reportpb_report_pb);
var pkg_host_group_host_grouppb_host_group_pb = require('../../../pkg/host_group/host_grouppb/host_group_pb.js');
goog.object.extend(proto, pkg_host_group_host_grouppb_host_group_pb);
var pkg_host_hostpb_host_pb = require('../../../pkg/host/hostpb/host_pb.js');
goog.object.extend(proto, pkg_host_hostpb_host_pb);
var pkg_team_teampb_team_pb = require('../../../pkg/team/teampb/team_pb.js');
goog.object.extend(proto, pkg_team_teampb_team_pb);
var pkg_service_servicepb_service_pb = require('../../../pkg/service/servicepb/service_pb.js');
goog.object.extend(proto, pkg_service_servicepb_service_pb);
var pkg_service_group_service_grouppb_service_group_pb = require('../../../pkg/service_group/service_grouppb/service_group_pb.js');
goog.object.extend(proto, pkg_service_group_service_grouppb_service_group_pb);
var pkg_round_roundpb_round_pb = require('../../../pkg/round/roundpb/round_pb.js');
goog.object.extend(proto, pkg_round_roundpb_round_pb);
var pkg_property_propertypb_property_pb = require('../../../pkg/property/propertypb/property_pb.js');
goog.object.extend(proto, pkg_property_propertypb_property_pb);
var pkg_check_checkpb_check_pb = require('../../../pkg/check/checkpb/check_pb.js');
goog.object.extend(proto, pkg_check_checkpb_check_pb);
var pkg_user_userpb_user_pb = require('../../../pkg/user/userpb/user_pb.js');
goog.object.extend(proto, pkg_user_userpb_user_pb);
var pkg_policy_policypb_policy_pb = require('../../../pkg/policy/policypb/policy_pb.js');
goog.object.extend(proto, pkg_policy_policypb_policy_pb);
goog.exportSymbol('proto.pkg.competition.competitionpb.Competition', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.DeleteCompetitionRequest', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.DeleteCompetitionResponse', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.LoadCompetitionRequest', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.LoadCompetitionResponse', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.ResetScoresRequest', null, global);
goog.exportSymbol('proto.pkg.competition.competitionpb.ResetScoresResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.Competition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pkg.competition.competitionpb.Competition.repeatedFields_, null);
};
goog.inherits(proto.pkg.competition.competitionpb.Competition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.Competition.displayName = 'proto.pkg.competition.competitionpb.Competition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.LoadCompetitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.LoadCompetitionRequest.displayName = 'proto.pkg.competition.competitionpb.LoadCompetitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.LoadCompetitionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.LoadCompetitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.LoadCompetitionResponse.displayName = 'proto.pkg.competition.competitionpb.LoadCompetitionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.displayName = 'proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.displayName = 'proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.displayName = 'proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.displayName = 'proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.ResetScoresRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.ResetScoresRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.ResetScoresRequest.displayName = 'proto.pkg.competition.competitionpb.ResetScoresRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.ResetScoresResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.ResetScoresResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.ResetScoresResponse.displayName = 'proto.pkg.competition.competitionpb.ResetScoresResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.DeleteCompetitionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.DeleteCompetitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.DeleteCompetitionRequest.displayName = 'proto.pkg.competition.competitionpb.DeleteCompetitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pkg.competition.competitionpb.DeleteCompetitionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pkg.competition.competitionpb.DeleteCompetitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pkg.competition.competitionpb.DeleteCompetitionResponse.displayName = 'proto.pkg.competition.competitionpb.DeleteCompetitionResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pkg.competition.competitionpb.Competition.repeatedFields_ = [3,4,5,6,7,8,9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.Competition.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.Competition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.Competition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.Competition.toObject = function(includeInstance, msg) {
  var f, obj = {
    dynamicConfig: (f = msg.getDynamicConfig()) && pkg_config_configpb_config_pb.DynamicConfig.toObject(includeInstance, f),
    report: (f = msg.getReport()) && pkg_report_reportpb_report_pb.Report.toObject(includeInstance, f),
    hostGroupsList: jspb.Message.toObjectList(msg.getHostGroupsList(),
    pkg_host_group_host_grouppb_host_group_pb.HostGroup.toObject, includeInstance),
    hostsList: jspb.Message.toObjectList(msg.getHostsList(),
    pkg_host_hostpb_host_pb.Host.toObject, includeInstance),
    teamsList: jspb.Message.toObjectList(msg.getTeamsList(),
    pkg_team_teampb_team_pb.Team.toObject, includeInstance),
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    pkg_service_servicepb_service_pb.Service.toObject, includeInstance),
    serviceGroupsList: jspb.Message.toObjectList(msg.getServiceGroupsList(),
    pkg_service_group_service_grouppb_service_group_pb.ServiceGroup.toObject, includeInstance),
    roundsList: jspb.Message.toObjectList(msg.getRoundsList(),
    pkg_round_roundpb_round_pb.Round.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    pkg_property_propertypb_property_pb.Property.toObject, includeInstance),
    checksList: jspb.Message.toObjectList(msg.getChecksList(),
    pkg_check_checkpb_check_pb.Check.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    pkg_user_userpb_user_pb.User.toObject, includeInstance),
    policy: (f = msg.getPolicy()) && pkg_policy_policypb_policy_pb.Policy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.Competition}
 */
proto.pkg.competition.competitionpb.Competition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.Competition;
  return proto.pkg.competition.competitionpb.Competition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.Competition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.Competition}
 */
proto.pkg.competition.competitionpb.Competition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new pkg_config_configpb_config_pb.DynamicConfig;
      reader.readMessage(value,pkg_config_configpb_config_pb.DynamicConfig.deserializeBinaryFromReader);
      msg.setDynamicConfig(value);
      break;
    case 2:
      var value = new pkg_report_reportpb_report_pb.Report;
      reader.readMessage(value,pkg_report_reportpb_report_pb.Report.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    case 3:
      var value = new pkg_host_group_host_grouppb_host_group_pb.HostGroup;
      reader.readMessage(value,pkg_host_group_host_grouppb_host_group_pb.HostGroup.deserializeBinaryFromReader);
      msg.addHostGroups(value);
      break;
    case 4:
      var value = new pkg_host_hostpb_host_pb.Host;
      reader.readMessage(value,pkg_host_hostpb_host_pb.Host.deserializeBinaryFromReader);
      msg.addHosts(value);
      break;
    case 5:
      var value = new pkg_team_teampb_team_pb.Team;
      reader.readMessage(value,pkg_team_teampb_team_pb.Team.deserializeBinaryFromReader);
      msg.addTeams(value);
      break;
    case 6:
      var value = new pkg_service_servicepb_service_pb.Service;
      reader.readMessage(value,pkg_service_servicepb_service_pb.Service.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    case 7:
      var value = new pkg_service_group_service_grouppb_service_group_pb.ServiceGroup;
      reader.readMessage(value,pkg_service_group_service_grouppb_service_group_pb.ServiceGroup.deserializeBinaryFromReader);
      msg.addServiceGroups(value);
      break;
    case 8:
      var value = new pkg_round_roundpb_round_pb.Round;
      reader.readMessage(value,pkg_round_roundpb_round_pb.Round.deserializeBinaryFromReader);
      msg.addRounds(value);
      break;
    case 9:
      var value = new pkg_property_propertypb_property_pb.Property;
      reader.readMessage(value,pkg_property_propertypb_property_pb.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    case 10:
      var value = new pkg_check_checkpb_check_pb.Check;
      reader.readMessage(value,pkg_check_checkpb_check_pb.Check.deserializeBinaryFromReader);
      msg.addChecks(value);
      break;
    case 11:
      var value = new pkg_user_userpb_user_pb.User;
      reader.readMessage(value,pkg_user_userpb_user_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 12:
      var value = new pkg_policy_policypb_policy_pb.Policy;
      reader.readMessage(value,pkg_policy_policypb_policy_pb.Policy.deserializeBinaryFromReader);
      msg.setPolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.Competition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.Competition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.Competition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.Competition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDynamicConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      pkg_config_configpb_config_pb.DynamicConfig.serializeBinaryToWriter
    );
  }
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pkg_report_reportpb_report_pb.Report.serializeBinaryToWriter
    );
  }
  f = message.getHostGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      pkg_host_group_host_grouppb_host_group_pb.HostGroup.serializeBinaryToWriter
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      pkg_host_hostpb_host_pb.Host.serializeBinaryToWriter
    );
  }
  f = message.getTeamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      pkg_team_teampb_team_pb.Team.serializeBinaryToWriter
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      pkg_service_servicepb_service_pb.Service.serializeBinaryToWriter
    );
  }
  f = message.getServiceGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      pkg_service_group_service_grouppb_service_group_pb.ServiceGroup.serializeBinaryToWriter
    );
  }
  f = message.getRoundsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      pkg_round_roundpb_round_pb.Round.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      pkg_property_propertypb_property_pb.Property.serializeBinaryToWriter
    );
  }
  f = message.getChecksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      pkg_check_checkpb_check_pb.Check.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      pkg_user_userpb_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      pkg_policy_policypb_policy_pb.Policy.serializeBinaryToWriter
    );
  }
};


/**
 * optional pkg.config.config.DynamicConfig dynamic_config = 1;
 * @return {?proto.pkg.config.config.DynamicConfig}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getDynamicConfig = function() {
  return /** @type{?proto.pkg.config.config.DynamicConfig} */ (
    jspb.Message.getWrapperField(this, pkg_config_configpb_config_pb.DynamicConfig, 1));
};


/**
 * @param {?proto.pkg.config.config.DynamicConfig|undefined} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setDynamicConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearDynamicConfig = function() {
  return this.setDynamicConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pkg.competition.competitionpb.Competition.prototype.hasDynamicConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional pkg.report.reportpb.Report report = 2;
 * @return {?proto.pkg.report.reportpb.Report}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getReport = function() {
  return /** @type{?proto.pkg.report.reportpb.Report} */ (
    jspb.Message.getWrapperField(this, pkg_report_reportpb_report_pb.Report, 2));
};


/**
 * @param {?proto.pkg.report.reportpb.Report|undefined} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setReport = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearReport = function() {
  return this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pkg.competition.competitionpb.Competition.prototype.hasReport = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated pkg.host_group.host_grouppb.HostGroup host_groups = 3;
 * @return {!Array<!proto.pkg.host_group.host_grouppb.HostGroup>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getHostGroupsList = function() {
  return /** @type{!Array<!proto.pkg.host_group.host_grouppb.HostGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_host_group_host_grouppb_host_group_pb.HostGroup, 3));
};


/**
 * @param {!Array<!proto.pkg.host_group.host_grouppb.HostGroup>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setHostGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pkg.host_group.host_grouppb.HostGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.host_group.host_grouppb.HostGroup}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addHostGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pkg.host_group.host_grouppb.HostGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearHostGroupsList = function() {
  return this.setHostGroupsList([]);
};


/**
 * repeated pkg.host.hostpb.Host hosts = 4;
 * @return {!Array<!proto.pkg.host.hostpb.Host>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getHostsList = function() {
  return /** @type{!Array<!proto.pkg.host.hostpb.Host>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_host_hostpb_host_pb.Host, 4));
};


/**
 * @param {!Array<!proto.pkg.host.hostpb.Host>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setHostsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pkg.host.hostpb.Host=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.host.hostpb.Host}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addHosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pkg.host.hostpb.Host, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearHostsList = function() {
  return this.setHostsList([]);
};


/**
 * repeated pkg.team.teampb.Team teams = 5;
 * @return {!Array<!proto.pkg.team.teampb.Team>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getTeamsList = function() {
  return /** @type{!Array<!proto.pkg.team.teampb.Team>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_team_teampb_team_pb.Team, 5));
};


/**
 * @param {!Array<!proto.pkg.team.teampb.Team>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setTeamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pkg.team.teampb.Team=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.team.teampb.Team}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addTeams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pkg.team.teampb.Team, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearTeamsList = function() {
  return this.setTeamsList([]);
};


/**
 * repeated pkg.service.servicepb.Service services = 6;
 * @return {!Array<!proto.pkg.service.servicepb.Service>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.pkg.service.servicepb.Service>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_service_servicepb_service_pb.Service, 6));
};


/**
 * @param {!Array<!proto.pkg.service.servicepb.Service>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pkg.service.servicepb.Service=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.service.servicepb.Service}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pkg.service.servicepb.Service, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearServicesList = function() {
  return this.setServicesList([]);
};


/**
 * repeated pkg.service_group.service_grouppb.ServiceGroup service_groups = 7;
 * @return {!Array<!proto.pkg.service_group.service_grouppb.ServiceGroup>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getServiceGroupsList = function() {
  return /** @type{!Array<!proto.pkg.service_group.service_grouppb.ServiceGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_service_group_service_grouppb_service_group_pb.ServiceGroup, 7));
};


/**
 * @param {!Array<!proto.pkg.service_group.service_grouppb.ServiceGroup>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setServiceGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.pkg.service_group.service_grouppb.ServiceGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.service_group.service_grouppb.ServiceGroup}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addServiceGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.pkg.service_group.service_grouppb.ServiceGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearServiceGroupsList = function() {
  return this.setServiceGroupsList([]);
};


/**
 * repeated pkg.round.roundpb.Round rounds = 8;
 * @return {!Array<!proto.pkg.round.roundpb.Round>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getRoundsList = function() {
  return /** @type{!Array<!proto.pkg.round.roundpb.Round>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_round_roundpb_round_pb.Round, 8));
};


/**
 * @param {!Array<!proto.pkg.round.roundpb.Round>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setRoundsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.pkg.round.roundpb.Round=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.round.roundpb.Round}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addRounds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.pkg.round.roundpb.Round, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearRoundsList = function() {
  return this.setRoundsList([]);
};


/**
 * repeated pkg.property.propertypb.Property properties = 9;
 * @return {!Array<!proto.pkg.property.propertypb.Property>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.pkg.property.propertypb.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_property_propertypb_property_pb.Property, 9));
};


/**
 * @param {!Array<!proto.pkg.property.propertypb.Property>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.pkg.property.propertypb.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.property.propertypb.Property}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.pkg.property.propertypb.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};


/**
 * repeated pkg.check.checkpb.Check checks = 10;
 * @return {!Array<!proto.pkg.check.checkpb.Check>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getChecksList = function() {
  return /** @type{!Array<!proto.pkg.check.checkpb.Check>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_check_checkpb_check_pb.Check, 10));
};


/**
 * @param {!Array<!proto.pkg.check.checkpb.Check>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setChecksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pkg.check.checkpb.Check=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.check.checkpb.Check}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addChecks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pkg.check.checkpb.Check, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearChecksList = function() {
  return this.setChecksList([]);
};


/**
 * repeated pkg.user.userpb.User users = 11;
 * @return {!Array<!proto.pkg.user.userpb.User>}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.pkg.user.userpb.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, pkg_user_userpb_user_pb.User, 11));
};


/**
 * @param {!Array<!proto.pkg.user.userpb.User>} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.pkg.user.userpb.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pkg.user.userpb.User}
 */
proto.pkg.competition.competitionpb.Competition.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.pkg.user.userpb.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * optional pkg.policy.policypb.Policy policy = 12;
 * @return {?proto.pkg.policy.policypb.Policy}
 */
proto.pkg.competition.competitionpb.Competition.prototype.getPolicy = function() {
  return /** @type{?proto.pkg.policy.policypb.Policy} */ (
    jspb.Message.getWrapperField(this, pkg_policy_policypb_policy_pb.Policy, 12));
};


/**
 * @param {?proto.pkg.policy.policypb.Policy|undefined} value
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
*/
proto.pkg.competition.competitionpb.Competition.prototype.setPolicy = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pkg.competition.competitionpb.Competition} returns this
 */
proto.pkg.competition.competitionpb.Competition.prototype.clearPolicy = function() {
  return this.setPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pkg.competition.competitionpb.Competition.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.LoadCompetitionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.LoadCompetitionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    competition: (f = msg.getCompetition()) && proto.pkg.competition.competitionpb.Competition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.LoadCompetitionRequest}
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.LoadCompetitionRequest;
  return proto.pkg.competition.competitionpb.LoadCompetitionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.LoadCompetitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.LoadCompetitionRequest}
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pkg.competition.competitionpb.Competition;
      reader.readMessage(value,proto.pkg.competition.competitionpb.Competition.deserializeBinaryFromReader);
      msg.setCompetition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.LoadCompetitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.LoadCompetitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompetition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pkg.competition.competitionpb.Competition.serializeBinaryToWriter
    );
  }
};


/**
 * optional Competition competition = 1;
 * @return {?proto.pkg.competition.competitionpb.Competition}
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.prototype.getCompetition = function() {
  return /** @type{?proto.pkg.competition.competitionpb.Competition} */ (
    jspb.Message.getWrapperField(this, proto.pkg.competition.competitionpb.Competition, 1));
};


/**
 * @param {?proto.pkg.competition.competitionpb.Competition|undefined} value
 * @return {!proto.pkg.competition.competitionpb.LoadCompetitionRequest} returns this
*/
proto.pkg.competition.competitionpb.LoadCompetitionRequest.prototype.setCompetition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pkg.competition.competitionpb.LoadCompetitionRequest} returns this
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.prototype.clearCompetition = function() {
  return this.setCompetition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pkg.competition.competitionpb.LoadCompetitionRequest.prototype.hasCompetition = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.LoadCompetitionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.LoadCompetitionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.LoadCompetitionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.LoadCompetitionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.LoadCompetitionResponse}
 */
proto.pkg.competition.competitionpb.LoadCompetitionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.LoadCompetitionResponse;
  return proto.pkg.competition.competitionpb.LoadCompetitionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.LoadCompetitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.LoadCompetitionResponse}
 */
proto.pkg.competition.competitionpb.LoadCompetitionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.LoadCompetitionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.LoadCompetitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.LoadCompetitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.LoadCompetitionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest;
  return proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    competition: (f = msg.getCompetition()) && proto.pkg.competition.competitionpb.Competition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse;
  return proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pkg.competition.competitionpb.Competition;
      reader.readMessage(value,proto.pkg.competition.competitionpb.Competition.deserializeBinaryFromReader);
      msg.setCompetition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompetition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pkg.competition.competitionpb.Competition.serializeBinaryToWriter
    );
  }
};


/**
 * optional Competition competition = 1;
 * @return {?proto.pkg.competition.competitionpb.Competition}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.prototype.getCompetition = function() {
  return /** @type{?proto.pkg.competition.competitionpb.Competition} */ (
    jspb.Message.getWrapperField(this, proto.pkg.competition.competitionpb.Competition, 1));
};


/**
 * @param {?proto.pkg.competition.competitionpb.Competition|undefined} value
 * @return {!proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse} returns this
*/
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.prototype.setCompetition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse} returns this
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.prototype.clearCompetition = function() {
  return this.setCompetition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pkg.competition.competitionpb.FetchCoreCompetitionResponse.prototype.hasCompetition = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest;
  return proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    competition: (f = msg.getCompetition()) && proto.pkg.competition.competitionpb.Competition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse;
  return proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pkg.competition.competitionpb.Competition;
      reader.readMessage(value,proto.pkg.competition.competitionpb.Competition.deserializeBinaryFromReader);
      msg.setCompetition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompetition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pkg.competition.competitionpb.Competition.serializeBinaryToWriter
    );
  }
};


/**
 * optional Competition competition = 1;
 * @return {?proto.pkg.competition.competitionpb.Competition}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.prototype.getCompetition = function() {
  return /** @type{?proto.pkg.competition.competitionpb.Competition} */ (
    jspb.Message.getWrapperField(this, proto.pkg.competition.competitionpb.Competition, 1));
};


/**
 * @param {?proto.pkg.competition.competitionpb.Competition|undefined} value
 * @return {!proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse} returns this
*/
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.prototype.setCompetition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse} returns this
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.prototype.clearCompetition = function() {
  return this.setCompetition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pkg.competition.competitionpb.FetchEntireCompetitionResponse.prototype.hasCompetition = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.ResetScoresRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.ResetScoresRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.ResetScoresRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.ResetScoresRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.ResetScoresRequest}
 */
proto.pkg.competition.competitionpb.ResetScoresRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.ResetScoresRequest;
  return proto.pkg.competition.competitionpb.ResetScoresRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.ResetScoresRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.ResetScoresRequest}
 */
proto.pkg.competition.competitionpb.ResetScoresRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.ResetScoresRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.ResetScoresRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.ResetScoresRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.ResetScoresRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.ResetScoresResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.ResetScoresResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.ResetScoresResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.ResetScoresResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.ResetScoresResponse}
 */
proto.pkg.competition.competitionpb.ResetScoresResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.ResetScoresResponse;
  return proto.pkg.competition.competitionpb.ResetScoresResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.ResetScoresResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.ResetScoresResponse}
 */
proto.pkg.competition.competitionpb.ResetScoresResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.ResetScoresResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.ResetScoresResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.ResetScoresResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.ResetScoresResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.DeleteCompetitionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.DeleteCompetitionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.DeleteCompetitionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.DeleteCompetitionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.DeleteCompetitionRequest}
 */
proto.pkg.competition.competitionpb.DeleteCompetitionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.DeleteCompetitionRequest;
  return proto.pkg.competition.competitionpb.DeleteCompetitionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.DeleteCompetitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.DeleteCompetitionRequest}
 */
proto.pkg.competition.competitionpb.DeleteCompetitionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.DeleteCompetitionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.DeleteCompetitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.DeleteCompetitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.DeleteCompetitionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pkg.competition.competitionpb.DeleteCompetitionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pkg.competition.competitionpb.DeleteCompetitionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pkg.competition.competitionpb.DeleteCompetitionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.DeleteCompetitionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pkg.competition.competitionpb.DeleteCompetitionResponse}
 */
proto.pkg.competition.competitionpb.DeleteCompetitionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pkg.competition.competitionpb.DeleteCompetitionResponse;
  return proto.pkg.competition.competitionpb.DeleteCompetitionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pkg.competition.competitionpb.DeleteCompetitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pkg.competition.competitionpb.DeleteCompetitionResponse}
 */
proto.pkg.competition.competitionpb.DeleteCompetitionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pkg.competition.competitionpb.DeleteCompetitionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pkg.competition.competitionpb.DeleteCompetitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pkg.competition.competitionpb.DeleteCompetitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pkg.competition.competitionpb.DeleteCompetitionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.pkg.competition.competitionpb);
